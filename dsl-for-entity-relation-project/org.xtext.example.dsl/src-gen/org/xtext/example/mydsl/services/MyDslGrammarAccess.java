/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesEntityParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		private final Assignment cRelationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationsRelationParserRuleCall_3_0 = (RuleCall)cRelationsAssignment_3.eContents().get(0);
		
		//System:
		//    'system' name=ID entities+=Entity* relations+=Relation*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID entities+=Entity* relations+=Relation*
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_2_0() { return cEntitiesEntityParserRuleCall_2_0; }
		
		//relations+=Relation*
		public Assignment getRelationsAssignment_3() { return cRelationsAssignment_3; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_3_0() { return cRelationsRelationParserRuleCall_3_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cWeakKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Entity:
		//    'entity' name=ID ('is' 'weak')? ( '{' attributes+=Attribute* '}' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID ('is' 'weak')? ( '{' attributes+=Attribute* '}' )?
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('is' 'weak')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'is'
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//'weak'
		public Keyword getWeakKeyword_2_1() { return cWeakKeyword_2_1; }
		
		//( '{' attributes+=Attribute* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0() { return cAttributesAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1_1_1 = (RuleCall)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cWeakKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cKeyKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		
		//Attribute:
		//    'attribute' name=ID ('[' (ID (',' ID)*)? ']')? ('is' ('weak' | 'key'))? ('as' type=Type)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID ('[' (ID (',' ID)*)? ']')? ('is' ('weak' | 'key'))? ('as' type=Type)?
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' (ID (',' ID)*)? ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(ID (',' ID)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1_0() { return cIDTerminalRuleCall_2_1_0; }
		
		//(',' ID)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1_1_1() { return cIDTerminalRuleCall_2_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//('is' ('weak' | 'key'))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'is'
		public Keyword getIsKeyword_3_0() { return cIsKeyword_3_0; }
		
		//('weak' | 'key')
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'weak'
		public Keyword getWeakKeyword_3_1_0() { return cWeakKeyword_3_1_0; }
		
		//'key'
		public Keyword getKeyKeyword_3_1_1() { return cKeyKeyword_3_1_1; }
		
		//('as' type=Type)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'as'
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }
		
		//type=Type
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_4_1_0() { return cTypeTypeParserRuleCall_4_1_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFromEntityEntityCrossReference_1_0 = (CrossReference)cFromEntityAssignment_1.eContents().get(0);
		private final RuleCall cFromEntityEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cFromEntityEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cToEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cToEntityEntityCrossReference_3_0 = (CrossReference)cToEntityAssignment_3.eContents().get(0);
		private final RuleCall cToEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cToEntityEntityCrossReference_3_0.eContents().get(1);
		private final Assignment cCardinalityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCardinalityCardinalityParserRuleCall_4_0 = (RuleCall)cCardinalityAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cWeakKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAttributesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_6_1_0 = (RuleCall)cAttributesAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Relation:
		//    'relation' fromEntity=[Entity] name=ID toEntity=[Entity] cardinality=Cardinality ('is' 'weak')? ('{' attributes+=Attribute* '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' fromEntity=[Entity] name=ID toEntity=[Entity] cardinality=Cardinality ('is' 'weak')? ('{' attributes+=Attribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//fromEntity=[Entity]
		public Assignment getFromEntityAssignment_1() { return cFromEntityAssignment_1; }
		
		//[Entity]
		public CrossReference getFromEntityEntityCrossReference_1_0() { return cFromEntityEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getFromEntityEntityIDTerminalRuleCall_1_0_1() { return cFromEntityEntityIDTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//toEntity=[Entity]
		public Assignment getToEntityAssignment_3() { return cToEntityAssignment_3; }
		
		//[Entity]
		public CrossReference getToEntityEntityCrossReference_3_0() { return cToEntityEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getToEntityEntityIDTerminalRuleCall_3_0_1() { return cToEntityEntityIDTerminalRuleCall_3_0_1; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_4() { return cCardinalityAssignment_4; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_4_0() { return cCardinalityCardinalityParserRuleCall_4_0; }
		
		//('is' 'weak')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'is'
		public Keyword getIsKeyword_5_0() { return cIsKeyword_5_0; }
		
		//'weak'
		public Keyword getWeakKeyword_5_1() { return cWeakKeyword_5_1; }
		
		//('{' attributes+=Attribute* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_6_1() { return cAttributesAssignment_6_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_1_0() { return cAttributesAttributeParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitOneFullStopFullStopDigitOneKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskFullStopFullStopAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitOneFullStopFullStopAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskFullStopFullStopDigitOneKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Cardinality:
		//    '1..1' | '*..*' | '1..*' | '*..1'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'1..1' | '*..*' | '1..*' | '*..1'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'1..1'
		public Keyword getDigitOneFullStopFullStopDigitOneKeyword_0() { return cDigitOneFullStopFullStopDigitOneKeyword_0; }
		
		//'*..*'
		public Keyword getAsteriskFullStopFullStopAsteriskKeyword_1() { return cAsteriskFullStopFullStopAsteriskKeyword_1; }
		
		//'1..*'
		public Keyword getDigitOneFullStopFullStopAsteriskKeyword_2() { return cDigitOneFullStopFullStopAsteriskKeyword_2; }
		
		//'*..1'
		public Keyword getAsteriskFullStopFullStopDigitOneKeyword_3() { return cAsteriskFullStopFullStopDigitOneKeyword_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumberKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Type: 'Number' | 'String';
		@Override public ParserRule getRule() { return rule; }
		
		//'Number' | 'String'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Number'
		public Keyword getNumberKeyword_0() { return cNumberKeyword_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	
	
	private final SystemElements pSystem;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final RelationElements pRelation;
	private final CardinalityElements pCardinality;
	private final TypeElements pType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pRelation = new RelationElements();
		this.pCardinality = new CardinalityElements();
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System:
	//    'system' name=ID entities+=Entity* relations+=Relation*
	//;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//Entity:
	//    'entity' name=ID ('is' 'weak')? ( '{' attributes+=Attribute* '}' )?
	//;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//    'attribute' name=ID ('[' (ID (',' ID)*)? ']')? ('is' ('weak' | 'key'))? ('as' type=Type)?
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Relation:
	//    'relation' fromEntity=[Entity] name=ID toEntity=[Entity] cardinality=Cardinality ('is' 'weak')? ('{' attributes+=Attribute* '}')?
	//;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Cardinality:
	//    '1..1' | '*..*' | '1..*' | '*..1'
	//;
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//Type: 'Number' | 'String';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
